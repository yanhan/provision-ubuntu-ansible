#!/bin/bash

set -e

os_name="$(uname)"

install_ubuntu_packages() {
  local retcode=0

  declare -r prereqs=(
    gcc
    git
    libbz2-dev
    libffi-dev
    libreadline-dev
    libsqlite3-dev
    libssl-dev
    make
    # TODO: Is python-dev required?
    #python-dev
    zlib1g-dev
  )

  local prereqs_to_install=()
  local pkg

  for pkg in "${prereqs[@]}"; do
    set +e
    dpkg -s "${pkg}" > /dev/null 2>&1
    retcode=${?}
    set -e
    if [ "${retcode}" -ne 0 ]; then
      prereqs_to_install+=("${pkg}")
    fi
  done

  if [ "${#prereqs_to_install[@]}" -gt 0 ]; then
    sudo apt install -y "${prereqs_to_install[@]}"
  fi
}

install_homebrew() {
  if ! command -v brew > /dev/null 2>&1; then
    ./install-homebrew.sh
  fi
  # shellcheck disable=SC2016
  echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> "${HOME}"/.zprofile
}

if [ "${os_name}" = "Linux" ]; then
  install_ubuntu_packages
elif [ "${os_name}" = "Darwin" ]; then
  install_homebrew
fi

if [ -d ~/.pyenv ]; then
  if [ "${PYENV_ROOT}" = "" ]; then
    export PYENV_ROOT="${HOME}"/.pyenv
    export PATH="${PYENV_ROOT}/bin:${PATH}"
  fi
  eval "$(pyenv init -)"
fi

if ! command -v pyenv > /dev/null 2>&1; then
  git clone https://github.com/pyenv/pyenv.git ~/.pyenv
  cat >> ~/.bashrc <<- EOF
export PYENV_ROOT="\${HOME}/.pyenv"
export PATH="\${PYENV_ROOT}/bin:\${PATH}"
if command -v pyenv >/dev/null 2>&1; then
  eval "\$(pyenv init -)"
fi
EOF

  export PYENV_ROOT="${HOME}"/.pyenv
  export PATH="${PYENV_ROOT}/bin:${PATH}"
  eval "$(pyenv init -)"
fi

pyenv_venv_dir="$(pyenv root)/plugins/pyenv-virtualenv"
if ! test -d "${pyenv_venv_dir}"; then
  git clone https://github.com/pyenv/pyenv-virtualenv.git "${pyenv_venv_dir}"
  # shellcheck disable=SC2016
  echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc
  eval "$(pyenv virtualenv-init -)"
fi

readonly python_version=3.11.2
if [ "$(grep -c "${python_version}" <<< "$(pyenv versions)")" -eq 0 ]; then
  pyenv install "${python_version}"
fi

eval "$(pyenv init -)"

readonly venv_name=provision-ubuntu
create_venv=false
if [ "$(grep -c "${venv_name}" <<< "$(pyenv versions)")" -eq 0 ]; then
  create_venv=true
else
  pyenv activate "${venv_name}"
  venv_python_version="$(python --version | grep -Eo ' [[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$' | xargs)"
  pyenv deactivate
  if [ "${venv_python_version}" != "${python_version}" ]; then
    printf "Uninstalling existing virtualenv %s because its python version %s is not the desired %s\n" "${venv_name}" "${venv_python_version}" "${python_version}"
    pyenv uninstall -f "${venv_name}"
    create_venv=true
  fi
fi

if [ "${create_venv}" = "true" ]; then
  pyenv virtualenv "${python_version}" "${venv_name}"
fi

pyenv activate "${venv_name}"

pip install -r requirements.txt
# -e home_path=${HOME} sets the value of the home_path variable to the home
# directory of the current user.
# It is useful when we are provisioning a system which does not use our
# default username
ansible-playbook -v -K -i inventory -e home_path="${HOME}" "$@" localhost.yml
pyenv deactivate

# Set global python version
pyenv global "${python_version}"

# Install neovim-remote
if [ 0 -eq "$(pip3 list --user | grep -c neovim-remote)" ]; then
  pip3 install --user neovim-remote
fi

cat <<- EOF

Please run the following commands to complete the setup:

    exec "\${SHELL}"
    chsh --shell /bin/zsh $(whoami)

EOF

if [ "${os_name}" = "Linux" ]; then
  cat <<- EOF
After setting your iptables rules, run:

    sudo dpkg-reconfigure iptables-persistent

EOF
fi
